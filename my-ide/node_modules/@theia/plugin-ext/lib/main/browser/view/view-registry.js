"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var frontend_application_state_1 = require("@theia/core/lib/browser/frontend-application-state");
var views_container_widget_1 = require("./views-container-widget");
var plugin_shared_style_1 = require("../plugin-shared-style");
var READY = 'ready';
var DEFAULT_LOCATION = 'left';
var ViewRegistry = /** @class */ (function () {
    function ViewRegistry() {
        this.treeViewWidgets = new Map();
        this.containerWidgets = new Map();
    }
    ViewRegistry.prototype.init = function () {
        this.updateContainerOnApplicationReady = this.applicationStateService.reachedState(READY);
    };
    ViewRegistry.prototype.registerViewContainer = function (location, viewsContainer, containerViews) {
        var _this = this;
        if (this.containerWidgets.has(viewsContainer.id)) {
            return;
        }
        var iconClass = 'plugin-view-container-icon-' + viewsContainer.id;
        this.style.insertRule('.' + iconClass, function () { return "\n            mask: : url('" + viewsContainer.iconUrl + "') no-repeat 50% 50%;\n            -webkit-mask: url('" + viewsContainer.iconUrl + "') no-repeat 50% 50%;\n        "; });
        var containerWidget = new views_container_widget_1.ViewsContainerWidget(viewsContainer, containerViews);
        containerWidget.title.iconClass = iconClass;
        this.containerWidgets.set(viewsContainer.id, containerWidget);
        // add to the promise chain
        this.updateContainerOnApplicationReady = this.updateContainerOnApplicationReady.then(function () {
            if (_this.applicationShell.getTabBarFor(containerWidget)) {
                return;
            }
            _this.applicationShell.addWidget(containerWidget, {
                area: browser_1.ApplicationShell.isSideArea(location) ? location : DEFAULT_LOCATION
            });
            // update container
            _this.treeViewWidgets.forEach(function (treeViewWidget, viewId) {
                _this.addTreeViewWidget(viewsContainer.id, viewId, treeViewWidget);
            });
        });
    };
    ViewRegistry.prototype.registerTreeView = function (viewId, treeViewWidget) {
        var _this = this;
        this.treeViewWidgets.set(viewId, treeViewWidget);
        if (this.applicationStateService.state !== READY) {
            return;
        }
        // update containers
        this.containerWidgets.forEach(function (containerWidget, viewsContainerId) {
            _this.addTreeViewWidget(viewsContainerId, viewId, treeViewWidget);
        });
    };
    ViewRegistry.prototype.addTreeViewWidget = function (viewsContainerId, viewId, treeViewWidget) {
        var containerWidget = this.containerWidgets.get(viewsContainerId);
        if (containerWidget && containerWidget.hasView(viewId)) {
            containerWidget.addWidget(viewId, treeViewWidget);
        }
    };
    __decorate([
        inversify_1.inject(browser_1.ApplicationShell),
        __metadata("design:type", browser_1.ApplicationShell)
    ], ViewRegistry.prototype, "applicationShell", void 0);
    __decorate([
        inversify_1.inject(frontend_application_state_1.FrontendApplicationStateService),
        __metadata("design:type", frontend_application_state_1.FrontendApplicationStateService)
    ], ViewRegistry.prototype, "applicationStateService", void 0);
    __decorate([
        inversify_1.inject(plugin_shared_style_1.PluginSharedStyle),
        __metadata("design:type", plugin_shared_style_1.PluginSharedStyle)
    ], ViewRegistry.prototype, "style", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ViewRegistry.prototype, "init", null);
    ViewRegistry = __decorate([
        inversify_1.injectable()
    ], ViewRegistry);
    return ViewRegistry;
}());
exports.ViewRegistry = ViewRegistry;
//# sourceMappingURL=view-registry.js.map