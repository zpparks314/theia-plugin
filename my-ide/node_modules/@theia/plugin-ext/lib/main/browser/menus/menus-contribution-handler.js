"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any
var inversify_1 = require("inversify");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/editor/lib/browser");
var common_1 = require("@theia/core/lib/common");
var tab_bar_toolbar_1 = require("@theia/core/lib/browser/shell/tab-bar-toolbar");
var navigator_contribution_1 = require("@theia/navigator/lib/browser/navigator-contribution");
var quick_command_service_1 = require("@theia/core/lib/browser/quick-open/quick-command-service");
var tree_views_main_1 = require("../view/tree-views-main");
var debug_stack_frames_widget_1 = require("@theia/debug/lib/browser/view/debug-stack-frames-widget");
var debug_threads_widget_1 = require("@theia/debug/lib/browser/view/debug-threads-widget");
var metadata_selection_1 = require("../metadata-selection");
var MenusContributionPointHandler = /** @class */ (function () {
    function MenusContributionPointHandler() {
    }
    MenusContributionPointHandler_1 = MenusContributionPointHandler;
    MenusContributionPointHandler.prototype.handle = function (contributions) {
        var _this = this;
        var allMenus = contributions.menus;
        if (!allMenus) {
            return;
        }
        var _loop_1 = function (location_1) {
            var e_1, _a, e_2, _b;
            if (location_1 === 'commandPalette') {
                try {
                    for (var _c = __values(allMenus[location_1]), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var menu = _d.value;
                        if (menu.when) {
                            this_1.quickCommandService.pushCommandContext(menu.command, menu.when);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else if (location_1 === 'editor/title') {
                try {
                    for (var _e = __values(allMenus[location_1]), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var action = _f.value;
                        this_1.registerEditorTitleAction(action);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            else if (allMenus.hasOwnProperty(location_1)) {
                var menuPaths_1 = MenusContributionPointHandler_1.parseMenuPaths(location_1);
                if (!menuPaths_1.length) {
                    this_1.logger.warn("Plugin contributes items to a menu with invalid identifier: " + location_1);
                    return "continue";
                }
                var menus = allMenus[location_1];
                menus.forEach(function (menu) {
                    var e_3, _a;
                    try {
                        for (var menuPaths_2 = __values(menuPaths_1), menuPaths_2_1 = menuPaths_2.next(); !menuPaths_2_1.done; menuPaths_2_1 = menuPaths_2.next()) {
                            var menuPath = menuPaths_2_1.value;
                            _this.registerMenuAction(menuPath, menu);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (menuPaths_2_1 && !menuPaths_2_1.done && (_a = menuPaths_2.return)) _a.call(menuPaths_2);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                });
            }
        };
        var this_1 = this;
        for (var location_1 in allMenus) {
            _loop_1(location_1);
        }
    };
    MenusContributionPointHandler.prototype.registerEditorTitleAction = function (action) {
        var _this = this;
        var id = this.createSyntheticCommandId(action, { prefix: '__plugin.editor.title.action.' });
        var command = { id: id };
        this.commands.registerCommand(command, {
            execute: function (widget) { return widget instanceof browser_1.EditorWidget && _this.commands.executeCommand(action.command, widget.editor.uri['codeUri']); },
            isEnabled: function (widget) { return widget instanceof browser_1.EditorWidget && _this.commands.isEnabled(action.command, widget.editor.uri['codeUri']); },
            isVisible: function (widget) { return widget instanceof browser_1.EditorWidget && _this.commands.isVisible(action.command, widget.editor.uri['codeUri']); }
        });
        var group = action.group, when = action.when;
        var item = { id: id, command: id, group: group, when: when };
        this.tabBarToolbar.registerItem(item);
        this.onDidRegisterCommand(action.command, function (pluginCommand) {
            command.iconClass = pluginCommand.iconClass;
            item.tooltip = pluginCommand.label;
        });
    };
    MenusContributionPointHandler.parseMenuPaths = function (value) {
        switch (value) {
            case 'editor/context': return [browser_1.EDITOR_CONTEXT_MENU];
            case 'explorer/context': return [navigator_contribution_1.NAVIGATOR_CONTEXT_MENU];
            case 'view/item/context': return [tree_views_main_1.VIEW_ITEM_CONTEXT_MENU];
            case 'debug/callstack/context': return [debug_stack_frames_widget_1.DebugStackFramesWidget.CONTEXT_MENU, debug_threads_widget_1.DebugThreadsWidget.CONTEXT_MENU];
        }
        return [];
    };
    MenusContributionPointHandler.prototype.registerMenuAction = function (menuPath, menu) {
        var _this = this;
        var commandId = this.createSyntheticCommandId(menu, { prefix: '__plugin.menu.action.' });
        var command = { id: commandId };
        var selectedResource = function () {
            var selection = _this.selectionService.selection;
            var metadata = metadata_selection_1.MetadataSelection.getMetadata(selection);
            if (metadata) {
                return metadata;
            }
            var uri = core_1.UriSelection.getUri(selection);
            return uri ? uri['codeUri'] : (typeof selection !== 'object' && typeof selection !== 'function') ? selection : undefined;
        };
        this.commands.registerCommand(command, {
            execute: function () { return _this.commands.executeCommand(menu.command, selectedResource()); },
            isEnabled: function () { return _this.commands.isEnabled(menu.command, selectedResource()); },
            isVisible: function () { return _this.commands.isVisible(menu.command, selectedResource()); }
        });
        var when = menu.when;
        var _a = __read((menu.group || '').split('@'), 2), _b = _a[0], group = _b === void 0 ? '' : _b, _c = _a[1], order = _c === void 0 ? undefined : _c;
        var action = { commandId: commandId, order: order, when: when };
        this.menuRegistry.registerMenuAction(__spread(menuPath, [group]), action);
        this.onDidRegisterCommand(menu.command, function (pluginCommand) {
            command.category = pluginCommand.category;
            action.label = pluginCommand.label;
            action.icon = pluginCommand.iconClass;
        });
    };
    MenusContributionPointHandler.prototype.createSyntheticCommandId = function (menu, _a) {
        var prefix = _a.prefix;
        var command = menu.command;
        var id = prefix + command;
        var index = 0;
        while (this.commands.getCommand(id)) {
            id = prefix + command + ':' + index;
            index++;
        }
        return id;
    };
    MenusContributionPointHandler.prototype.onDidRegisterCommand = function (id, cb) {
        var _this = this;
        var command = this.commands.getCommand(id);
        if (command) {
            cb(command);
        }
        else {
            // Registering a menu action requires the related command to be already registered.
            // But Theia plugin registers the commands dynamically via the Commands API.
            // Let's wait for ~2 sec. It should be enough to finish registering all the contributed commands.
            // FIXME: remove this workaround (timer) once the https://github.com/theia-ide/theia/issues/3344 is fixed
            setTimeout(function () { return _this.onDidRegisterCommand(id, cb); }, 2000);
        }
    };
    var MenusContributionPointHandler_1;
    __decorate([
        inversify_1.inject(common_1.MenuModelRegistry),
        __metadata("design:type", common_1.MenuModelRegistry)
    ], MenusContributionPointHandler.prototype, "menuRegistry", void 0);
    __decorate([
        inversify_1.inject(core_1.CommandRegistry),
        __metadata("design:type", core_1.CommandRegistry)
    ], MenusContributionPointHandler.prototype, "commands", void 0);
    __decorate([
        inversify_1.inject(core_1.ILogger),
        __metadata("design:type", Object)
    ], MenusContributionPointHandler.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(quick_command_service_1.QuickCommandService),
        __metadata("design:type", quick_command_service_1.QuickCommandService)
    ], MenusContributionPointHandler.prototype, "quickCommandService", void 0);
    __decorate([
        inversify_1.inject(tab_bar_toolbar_1.TabBarToolbarRegistry),
        __metadata("design:type", tab_bar_toolbar_1.TabBarToolbarRegistry)
    ], MenusContributionPointHandler.prototype, "tabBarToolbar", void 0);
    __decorate([
        inversify_1.inject(core_1.SelectionService),
        __metadata("design:type", core_1.SelectionService)
    ], MenusContributionPointHandler.prototype, "selectionService", void 0);
    MenusContributionPointHandler = MenusContributionPointHandler_1 = __decorate([
        inversify_1.injectable()
    ], MenusContributionPointHandler);
    return MenusContributionPointHandler;
}());
exports.MenusContributionPointHandler = MenusContributionPointHandler;
//# sourceMappingURL=menus-contribution-handler.js.map