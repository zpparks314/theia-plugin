import { HostedPluginServer, HostedPluginClient, PluginMetadata, DebugConfiguration } from '../../common/plugin-protocol';
import { HostedPluginReader } from './plugin-reader';
import { HostedInstanceManager } from './hosted-instance-manager';
import { HostedPluginSupport } from './hosted-plugin';
import { HostedPluginsManager } from './hosted-plugins-manager';
import URI from '@theia/core/lib/common/uri';
import { ILogger } from '@theia/core';
import { ContributionProvider } from '@theia/core';
import { ExtPluginApiProvider, ExtPluginApi } from '../../common/plugin-ext-api-contribution';
import { HostedPluginDeployerHandler } from './hosted-plugin-deployer-handler';
export declare class HostedPluginServerImpl implements HostedPluginServer {
    private readonly reader;
    private readonly hostedPlugin;
    protected readonly hostedInstanceManager: HostedInstanceManager;
    protected readonly logger: ILogger;
    protected readonly hostedPluginsManager: HostedPluginsManager;
    protected readonly deployerHandler: HostedPluginDeployerHandler;
    protected readonly extPluginAPIContributions: ContributionProvider<ExtPluginApiProvider>;
    constructor(reader: HostedPluginReader, hostedPlugin: HostedPluginSupport, hostedInstanceManager: HostedInstanceManager);
    dispose(): void;
    setClient(client: HostedPluginClient): void;
    getHostedPlugin(): Promise<PluginMetadata | undefined>;
    getDeployedFrontendMetadata(): Promise<PluginMetadata[]>;
    getDeployedMetadata(): Promise<PluginMetadata[]>;
    getDeployedBackendMetadata(): Promise<PluginMetadata[]>;
    onMessage(message: string): Promise<void>;
    isPluginValid(uri: string): Promise<boolean>;
    runHostedPluginInstance(uri: string): Promise<string>;
    runDebugHostedPluginInstance(uri: string, debugConfig: DebugConfiguration): Promise<string>;
    terminateHostedPluginInstance(): Promise<void>;
    isHostedPluginInstanceRunning(): Promise<boolean>;
    getHostedPluginInstanceURI(): Promise<string>;
    getHostedPluginURI(): Promise<string>;
    protected uriToStrPromise(promise: Promise<URI>): Promise<string>;
    runWatchCompilation(path: string): Promise<void>;
    stopWatchCompilation(path: string): Promise<void>;
    isWatchCompilationRunning(path: string): Promise<boolean>;
    getExtPluginAPI(): Promise<ExtPluginApi[]>;
}
//# sourceMappingURL=plugin-service.d.ts.map