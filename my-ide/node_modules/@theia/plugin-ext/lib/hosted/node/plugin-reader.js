"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any
var path = require("path");
var fs = require("fs-extra");
var core_1 = require("@theia/core");
var inversify_1 = require("inversify");
var promise_util_1 = require("@theia/core/lib/common/promise-util");
var plugin_protocol_1 = require("../../common/plugin-protocol");
var metadata_scanner_1 = require("./metadata-scanner");
var HostedPluginReader = /** @class */ (function () {
    function HostedPluginReader() {
        this.hostedPlugin = new promise_util_1.Deferred();
        /**
         * Map between a plugin's id and the local storage
         */
        this.pluginsIdsFiles = new Map();
    }
    HostedPluginReader_1 = HostedPluginReader;
    HostedPluginReader.prototype.initialize = function () {
        this.doGetPluginMetadata(process.env.HOSTED_PLUGIN)
            .then(this.hostedPlugin.resolve.bind(this.hostedPlugin));
    };
    HostedPluginReader.prototype.configure = function (app) {
        var _this = this;
        app.get('/hostedPlugin/:pluginId/:path(*)', function (req, res) {
            var pluginId = req.params.pluginId;
            var filePath = req.params.path;
            var localPath = _this.pluginsIdsFiles.get(pluginId);
            if (localPath) {
                var fileToServe = localPath + filePath;
                res.sendFile(fileToServe);
            }
            else {
                res.status(404).send("The plugin with id '" + pluginId + "' does not exist.");
            }
        });
    };
    HostedPluginReader.prototype.getPluginMetadata = function (pluginPath) {
        return __awaiter(this, void 0, void 0, function () {
            var plugin, hostedPlugin;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.doGetPluginMetadata(pluginPath)];
                    case 1:
                        plugin = _a.sent();
                        if (!plugin) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getPlugin()];
                    case 2:
                        hostedPlugin = _a.sent();
                        if (hostedPlugin && hostedPlugin.model.name === plugin.model.name) {
                            // prefer hosted plugin
                            return [2 /*return*/, undefined];
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/, plugin];
                }
            });
        });
    };
    /**
     * MUST never throw to isolate plugin deployment
     */
    HostedPluginReader.prototype.doGetPluginMetadata = function (pluginPath) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        if (!pluginPath) {
                            return [2 /*return*/, undefined];
                        }
                        if (!pluginPath.endsWith('/')) {
                            pluginPath += '/';
                        }
                        return [4 /*yield*/, this.loadPluginMetadata(pluginPath)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        this.logger.error("Failed to load plugin metadata from \"" + pluginPath + "\"", e_1);
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    HostedPluginReader.prototype.loadPluginMetadata = function (pluginPath) {
        return __awaiter(this, void 0, void 0, function () {
            var manifest, pluginMetadata;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadManifest(pluginPath)];
                    case 1:
                        manifest = _a.sent();
                        if (!manifest) {
                            return [2 /*return*/, undefined];
                        }
                        manifest.packagePath = pluginPath;
                        pluginMetadata = this.scanner.getPluginMetadata(manifest);
                        if (pluginMetadata.model.entryPoint.backend) {
                            pluginMetadata.model.entryPoint.backend = path.resolve(pluginPath, pluginMetadata.model.entryPoint.backend);
                        }
                        if (pluginMetadata) {
                            // Add post processor
                            if (this.metadataProcessors) {
                                this.metadataProcessors.forEach(function (metadataProcessor) {
                                    metadataProcessor.process(pluginMetadata);
                                });
                            }
                            this.pluginsIdsFiles.set(plugin_protocol_1.getPluginId(pluginMetadata.model), pluginPath);
                        }
                        return [2 /*return*/, pluginMetadata];
                }
            });
        });
    };
    HostedPluginReader.prototype.getPlugin = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.hostedPlugin.promise];
            });
        });
    };
    HostedPluginReader.prototype.loadManifest = function (pluginPath) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, manifest, translations;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            fs.readJson(path.join(pluginPath, 'package.json')),
                            this.loadTranslations(pluginPath)
                        ])];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), manifest = _a[0], translations = _a[1];
                        return [2 /*return*/, manifest && translations && Object.keys(translations).length ?
                                this.localize(manifest, translations) :
                                manifest];
                }
            });
        });
    };
    HostedPluginReader.prototype.loadTranslations = function (pluginPath) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fs.readJson(path.join(pluginPath, 'package.nls.json'))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_2 = _a.sent();
                        if (e_2.code !== 'ENOENT') {
                            throw e_2;
                        }
                        return [2 /*return*/, {}];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    HostedPluginReader.prototype.localize = function (value, translations) {
        var e_3, _a;
        if (typeof value === 'string') {
            var match = HostedPluginReader_1.NLS_REGEX.exec(value);
            return match && translations[match[1]] || value;
        }
        if (Array.isArray(value)) {
            var result = [];
            try {
                for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                    var item = value_1_1.value;
                    result.push(this.localize(item, translations));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return result;
        }
        if (value === null) {
            return value;
        }
        if (typeof value === 'object') {
            var result = {};
            // tslint:disable-next-line:forin
            for (var propertyName in value) {
                result[propertyName] = this.localize(value[propertyName], translations);
            }
            return result;
        }
        return value;
    };
    var HostedPluginReader_1;
    HostedPluginReader.NLS_REGEX = /^%([\w\d.-]+)%$/i;
    __decorate([
        inversify_1.inject(core_1.ILogger),
        __metadata("design:type", Object)
    ], HostedPluginReader.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(metadata_scanner_1.MetadataScanner),
        __metadata("design:type", metadata_scanner_1.MetadataScanner)
    ], HostedPluginReader.prototype, "scanner", void 0);
    __decorate([
        inversify_1.optional(),
        inversify_1.multiInject(plugin_protocol_1.MetadataProcessor),
        __metadata("design:type", Array)
    ], HostedPluginReader.prototype, "metadataProcessors", void 0);
    HostedPluginReader = HostedPluginReader_1 = __decorate([
        inversify_1.injectable()
    ], HostedPluginReader);
    return HostedPluginReader;
}());
exports.HostedPluginReader = HostedPluginReader;
//# sourceMappingURL=plugin-reader.js.map