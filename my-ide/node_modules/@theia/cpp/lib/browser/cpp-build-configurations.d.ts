/********************************************************************************
 * Copyright (C) 2018-2019 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Emitter, Event } from '@theia/core';
import { CppPreferences } from './cpp-preferences';
import { StorageService } from '@theia/core/lib/browser/storage-service';
/**
 * Representation of a cpp build configuration.
 */
export interface CppBuildConfiguration {
    /**
     * The human-readable build configuration name.
     */
    name: string;
    /**
     * The base directory of the build configuration.
     */
    directory: string;
    /**
     * The list of commands for the build configuration.
     */
    commands?: {
        'build'?: string;
    };
}
export declare const CppBuildConfigurationManager: unique symbol;
export interface CppBuildConfigurationManager {
    /**
     * Get the list of defined build configurations.
     *
     * @returns an array of defined `CppBuildConfiguration`.
     */
    getConfigs(): CppBuildConfiguration[];
    /**
     * Get the list of valid defined build configurations.
     *
     * @returns an array of valid defined `CppBuildConfiguration`.
     * A `CppBuildConfiguration` is considered valid if it has a `name` and `directory`.
     */
    getValidConfigs(): CppBuildConfiguration[];
    /**
     * Get the active build configuration.
     *
     * @returns the active `CppBuildConfiguration` if it exists, else `undefined`.
     */
    getActiveConfig(): CppBuildConfiguration | undefined;
    /**
     * Set the active build configuration.
     *
     * @param config the active `CppBuildConfiguration`. If `undefined` no active build configuration will be set.
     */
    setActiveConfig(config: CppBuildConfiguration | undefined): void;
    /**
     * Event emitted when the active build configuration changes.
     *
     * @returns an event with the active `CppBuildConfiguration` if it exists, else `undefined`.
     */
    onActiveConfigChange: Event<CppBuildConfiguration | undefined>;
    /**
     * Promise resolved when the list of build configurations has been read
     * once, and the active configuration has been set, if relevant.
     */
    ready: Promise<void>;
}
export declare const CPP_BUILD_CONFIGURATIONS_PREFERENCE_KEY = "cpp.buildConfigurations";
/**
 * Entry point to get the list of build configurations and get/set the active
 * build configuration.
 */
export declare class CppBuildConfigurationManagerImpl implements CppBuildConfigurationManager {
    protected readonly cppPreferences: CppPreferences;
    protected readonly storageService: StorageService;
    /**
     * The current active build configuration.
     * If `undefined` there is no current active build configuration selected.
     */
    protected activeConfig: CppBuildConfiguration | undefined;
    /**
     * Emitter for when the active build configuration changes.
     */
    protected readonly activeConfigChangeEmitter: Emitter<CppBuildConfiguration | undefined>;
    readonly ACTIVE_BUILD_CONFIGURATION_STORAGE_KEY = "cpp.active-build-configuration";
    ready: Promise<void>;
    init(): Promise<void>;
    /**
     * Load the active build configuration from persistent storage.
     */
    protected loadActiveConfiguration(): Promise<void>;
    /**
     * Save the active build configuration to persistent storage.
     *
     * @param config the active `CppBuildConfiguration`.
     */
    protected saveActiveConfiguration(config: CppBuildConfiguration | undefined): void;
    /**
     * Update the active build configuration if applicable.
     */
    protected handlePreferencesUpdate(): void;
    /**
     * Determine if two `CppBuildConfiguration` are equal.
     *
     * @param a `CppBuildConfiguration`.
     * @param b `CppBuildConfiguration`.
     */
    protected equals(a: CppBuildConfiguration, b: CppBuildConfiguration): boolean;
    getActiveConfig(): CppBuildConfiguration | undefined;
    setActiveConfig(config: CppBuildConfiguration | undefined): void;
    readonly onActiveConfigChange: Event<CppBuildConfiguration | undefined>;
    getConfigs(): CppBuildConfiguration[];
    getValidConfigs(): CppBuildConfiguration[];
}
//# sourceMappingURL=cpp-build-configurations.d.ts.map