"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any
var common_1 = require("../../common");
function createPreferenceProxy(preferences, schema) {
    var toDispose = new common_1.DisposableCollection();
    var onPreferenceChangedEmitter = new common_1.Emitter();
    toDispose.push(onPreferenceChangedEmitter);
    toDispose.push(preferences.onPreferenceChanged(function (e) {
        var overriden = preferences.overridenPreferenceName(e.preferenceName);
        var preferenceName = overriden ? overriden.preferenceName : e.preferenceName;
        if (schema.properties[preferenceName]) {
            var newValue = e.newValue, oldValue = e.oldValue;
            onPreferenceChangedEmitter.fire({
                newValue: newValue, oldValue: oldValue, preferenceName: preferenceName,
                affects: function (resourceUri, overrideIdentifier) {
                    if (overrideIdentifier !== undefined) {
                        if (overriden && overriden.overrideIdentifier !== overrideIdentifier) {
                            return false;
                        }
                    }
                    return e.affects(resourceUri);
                }
            });
        }
    }));
    var unsupportedOperation = function (_, __) {
        throw new Error('Unsupported operation');
    };
    var getValue = function (arg, defaultValue, resourceUri) {
        var preferenceName = typeof arg === 'object' && arg.overrideIdentifier ?
            preferences.overridePreferenceName(arg) :
            arg;
        return preferences.get(preferenceName, defaultValue, resourceUri);
    };
    return new Proxy({}, {
        get: function (_, property) {
            if (schema.properties[property]) {
                return preferences.get(property);
            }
            if (property === 'onPreferenceChanged') {
                return onPreferenceChangedEmitter.event;
            }
            if (property === 'dispose') {
                return function () { return toDispose.dispose(); };
            }
            if (property === 'ready') {
                return preferences.ready;
            }
            if (property === 'get') {
                return getValue;
            }
            throw new Error("unexpected property: " + property);
        },
        ownKeys: function () { return Object.keys(schema.properties); },
        getOwnPropertyDescriptor: function (_, property) {
            if (schema.properties[property]) {
                return {
                    enumerable: true,
                    configurable: true
                };
            }
            return {};
        },
        set: unsupportedOperation,
        deleteProperty: unsupportedOperation,
        defineProperty: unsupportedOperation
    });
}
exports.createPreferenceProxy = createPreferenceProxy;
//# sourceMappingURL=preference-proxy.js.map