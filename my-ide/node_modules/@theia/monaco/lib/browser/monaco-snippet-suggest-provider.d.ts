/// <reference types="@typefox/monaco-editor-core/monaco" />
import URI from '@theia/core/lib/common/uri';
import { FileSystem } from '@theia/filesystem/lib/common';
export declare class MonacoSnippetSuggestProvider implements monaco.modes.ISuggestSupport {
    protected readonly filesystem: FileSystem;
    protected readonly snippets: Map<string, MonacoSnippetSuggestion[]>;
    protected readonly pendingSnippets: Map<string, Promise<void>[]>;
    provideCompletionItems(model: monaco.editor.ITextModel): Promise<monaco.modes.ISuggestResult>;
    resolveCompletionItem(_: monaco.editor.ITextModel, __: monaco.Position, item: monaco.modes.ISuggestion): monaco.modes.ISuggestion;
    protected loadSnippets(scope: string): Promise<void>;
    fromURI(uri: string | URI, options: SnippetLoadOptions): Promise<void>;
    /**
     * should NOT throw to prevent load erros on suggest
     */
    protected loadURI(uri: string | URI, options: SnippetLoadOptions): Promise<void>;
    fromJSON(snippets: JsonSerializedSnippets | undefined, { language, source }: SnippetLoadOptions): void;
    protected parseSnippets(snippets: JsonSerializedSnippets | undefined, accept: (name: string, snippet: JsonSerializedSnippet) => void): void;
    push(...snippets: Snippet[]): void;
}
export interface SnippetLoadOptions {
    language?: string | string[];
    source: string;
}
export interface JsonSerializedSnippets {
    [name: string]: JsonSerializedSnippet | {
        [name: string]: JsonSerializedSnippet;
    };
}
export interface JsonSerializedSnippet {
    body: string | string[];
    scope: string;
    prefix: string;
    description: string;
}
export declare namespace JsonSerializedSnippet {
    function is(obj: Object | undefined): obj is JsonSerializedSnippet;
}
export interface Snippet {
    readonly scopes: string[];
    readonly name: string;
    readonly prefix: string;
    readonly description: string;
    readonly body: string;
    readonly source: string;
}
export declare class MonacoSnippetSuggestion implements monaco.modes.ISuggestion {
    protected readonly snippet: Snippet;
    readonly label: string;
    readonly detail: string;
    readonly sortText: string;
    readonly noAutoAccept = true;
    readonly type: 'snippet';
    readonly snippetType: 'textmate';
    insertText: string;
    documentation?: monaco.IMarkdownString;
    constructor(snippet: Snippet);
    protected resolved: boolean;
    resolve(): MonacoSnippetSuggestion;
}
//# sourceMappingURL=monaco-snippet-suggest-provider.d.ts.map