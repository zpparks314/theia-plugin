"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var keymaps_parser_1 = require("./keymaps-parser");
describe('keymaps-parser', function () {
    var parser = new keymaps_parser_1.KeymapsParser();
    it('well formatted raw text', function () {
        assertParsing("{\n  \"keybindings\": [\n    {\n      \"keybinding\": \"ctrl+p\",\n      \"command\": \"command1\"\n    },\n    {\n      \"keybinding\": \"ctrl+shift+p\",\n      \"command\": \"command2\"\n    }\n  ],\n  \"errors\": []\n}", "[\n    {\n        \"keybinding\": \"ctrl+p\",\n        \"command\": \"command1\"\n    },\n    {\n        \"keybinding\": \"ctrl+shift+p\",\n        \"command\": \"command2\"\n    }\n]");
    });
    it('no array', function () {
        assertParsing("{\n  \"keybindings\": [],\n  \"errors\": [\n    \"should be array at \"\n  ]\n}", "{\n    \"keybinding\": \"ctrl+p\",\n    \"command\": \"command\"\n}");
    });
    it('additional property', function () {
        assertParsing("{\n  \"keybindings\": [],\n  \"errors\": [\n    \"should NOT have additional properties at /0\"\n  ]\n}", "[\n    {\n        \"keybinding\": \"ctrl+p\",\n        \"command\": \"command\",\n        \"extra\": 0\n    }\n]");
    });
    it('wrong type', function () {
        assertParsing("{\n  \"keybindings\": [],\n  \"errors\": [\n    \"should be string at /0/keybinding\"\n  ]\n}", "[\n    {\n        \"keybinding\": 0,\n        \"command\": \"command1\"\n    },\n    {\n        \"keybinding\": \"ctrl+shift+p\",\n        \"command\": 0\n    }\n]");
    });
    it('missing property', function () {
        assertParsing("{\n  \"keybindings\": [],\n  \"errors\": [\n    \"PropertyNameExpected at 44 offset of 1 length\",\n    \"ValueExpected at 44 offset of 1 length\",\n    \"should have required property 'command' at /0\"\n  ]\n}", "[\n    {\n        \"keybinding\": \"ctrl+p\",\n    }\n]");
    });
    function assertParsing(expectation, content) {
        var errors = [];
        var keybindings = parser.parse(content, errors);
        assert.deepEqual(expectation, JSON.stringify({ keybindings: keybindings, errors: errors }, undefined, 2));
    }
});
//# sourceMappingURL=keymaps-parser.spec.js.map