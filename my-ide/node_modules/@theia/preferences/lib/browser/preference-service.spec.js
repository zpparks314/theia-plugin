"use strict";
/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any
// tslint:disable:no-unused-expression
var jsdom_1 = require("@theia/core/lib/browser/test/jsdom");
var disableJSDOM = jsdom_1.enableJSDOM();
var inversify_1 = require("inversify");
var assert = require("assert");
var chai = require("chai");
var fs = require("fs-extra");
var temp = require("temp");
var common_1 = require("@theia/core/lib/common");
var preferences_1 = require("@theia/core/lib/browser/preferences");
var common_2 = require("@theia/filesystem/lib/common/");
var filesystem_watcher_1 = require("@theia/filesystem/lib/browser/filesystem-watcher");
var filesystem_watcher_protocol_1 = require("@theia/filesystem/lib/common/filesystem-watcher-protocol");
var filesystem_preferences_1 = require("@theia/filesystem/lib/browser/filesystem-preferences");
var core_1 = require("@theia/core");
var user_preference_provider_1 = require("./user-preference-provider");
var workspace_preference_provider_1 = require("./workspace-preference-provider");
var folders_preferences_provider_1 = require("./folders-preferences-provider");
var folder_preference_provider_1 = require("./folder-preference-provider");
var resource_1 = require("@theia/core/lib/common/resource");
var common_3 = require("@theia/workspace/lib/common/");
var window_service_1 = require("@theia/core/lib/browser/window/window-service");
var test_1 = require("@theia/core/lib/browser/preferences/test");
var test_2 = require("@theia/filesystem/lib/common/test");
var mock_logger_1 = require("@theia/core/lib/common/test/mock-logger");
var mock_resource_provider_1 = require("@theia/core/lib/common/test/mock-resource-provider");
var mock_workspace_server_1 = require("@theia/workspace/lib/common/test/mock-workspace-server");
var mock_window_service_1 = require("@theia/core/lib/browser/window/test/mock-window-service");
var workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
var workspace_preferences_1 = require("@theia/workspace/lib/browser/workspace-preferences");
var frontend_application_config_provider_1 = require("@theia/core/lib/browser/frontend-application-config-provider");
var sinon = require("sinon");
var uri_1 = require("@theia/core/lib/common/uri");
disableJSDOM();
var expect = chai.expect;
var testContainer;
var tempPath = temp.track().openSync().path;
var mockUserPreferenceEmitter = new common_1.Emitter();
var mockWorkspacePreferenceEmitter = new common_1.Emitter();
var mockFolderPreferenceEmitter = new common_1.Emitter();
function testContainerSetup() {
    var _this = this;
    testContainer = new inversify_1.Container();
    preferences_1.bindPreferenceSchemaProvider(testContainer.bind.bind(testContainer));
    testContainer.bind(user_preference_provider_1.UserPreferenceProvider).toSelf().inSingletonScope();
    testContainer.bind(workspace_preference_provider_1.WorkspacePreferenceProvider).toSelf().inSingletonScope();
    testContainer.bind(folders_preferences_provider_1.FoldersPreferencesProvider).toSelf().inSingletonScope();
    testContainer.bind(folder_preference_provider_1.FolderPreferenceProvider).toSelf().inSingletonScope();
    testContainer.bind(folder_preference_provider_1.FolderPreferenceProviderOptions).toConstantValue({ folder: { uri: 'file:///home/oneFile', isDirectory: true, lastModification: 0 } });
    testContainer.bind(folder_preference_provider_1.FolderPreferenceProviderFactory).toFactory(function (ctx) {
        return function (options) {
            var child = new inversify_1.Container({ defaultScope: 'Transient' });
            child.parent = ctx.container;
            child.bind(folder_preference_provider_1.FolderPreferenceProviderOptions).toConstantValue(options);
            return child.get(folder_preference_provider_1.FolderPreferenceProvider);
        };
    });
    testContainer.bind(preferences_1.PreferenceProviderProvider).toFactory(function (ctx) { return function (scope) {
        switch (scope) {
            case preferences_1.PreferenceScope.User:
                var userProvider = ctx.container.get(user_preference_provider_1.UserPreferenceProvider);
                sinon.stub(userProvider, 'onDidPreferencesChanged').get(function () {
                    return mockUserPreferenceEmitter.event;
                });
                return userProvider;
            case preferences_1.PreferenceScope.Workspace:
                var workspaceProvider = ctx.container.get(workspace_preference_provider_1.WorkspacePreferenceProvider);
                sinon.stub(workspaceProvider, 'onDidPreferencesChanged').get(function () {
                    return mockWorkspacePreferenceEmitter.event;
                });
                return workspaceProvider;
            case preferences_1.PreferenceScope.Folder:
                var folderProvider = ctx.container.get(folders_preferences_provider_1.FoldersPreferencesProvider);
                sinon.stub(folderProvider, 'onDidPreferencesChanged').get(function () {
                    return mockFolderPreferenceEmitter.event;
                });
                return folderProvider;
            default:
                return ctx.container.get(preferences_1.PreferenceSchemaProvider);
        }
    }; });
    testContainer.bind(preferences_1.PreferenceServiceImpl).toSelf().inSingletonScope();
    testContainer.bind(preferences_1.PreferenceService).toService(preferences_1.PreferenceServiceImpl);
    testContainer.bind(filesystem_preferences_1.FileSystemPreferences).toDynamicValue(function (ctx) {
        var preferences = ctx.container.get(preferences_1.PreferenceService);
        return filesystem_preferences_1.createFileSystemPreferences(preferences);
    }).inSingletonScope();
    /* Workspace mocks and bindings */
    testContainer.bind(common_3.WorkspaceServer).to(mock_workspace_server_1.MockWorkspaceServer);
    testContainer.bind(workspace_service_1.WorkspaceService).toSelf();
    testContainer.bind(workspace_preferences_1.WorkspacePreferences).toDynamicValue(function (ctx) {
        var preferences = ctx.container.get(preferences_1.PreferenceService);
        return workspace_preferences_1.createWorkspacePreferences(preferences);
    }).inSingletonScope();
    /* Window mocks and bindings*/
    testContainer.bind(window_service_1.WindowService).to(mock_window_service_1.MockWindowService);
    /* Resource mocks and bindings */
    testContainer.bind(mock_resource_provider_1.MockResourceProvider).toDynamicValue(function (ctx) {
        var resourceProvider = new mock_resource_provider_1.MockResourceProvider();
        sinon.stub(resourceProvider, 'get').callsFake(function () { return Promise.resolve({
            uri: new uri_1.default(''),
            dispose: function () { },
            readContents: function () {
                return fs.readFile(tempPath, 'utf-8');
            },
            saveContents: function (content, options) {
                return fs.writeFile(tempPath, content);
            }
        }); });
        return resourceProvider;
    });
    testContainer.bind(resource_1.ResourceProvider).toProvider(function (context) {
        return function (uri) { return context.container.get(mock_resource_provider_1.MockResourceProvider).get(uri); };
    });
    /* FS mocks and bindings */
    testContainer.bind(filesystem_watcher_protocol_1.FileSystemWatcherServer).to(test_2.MockFilesystemWatcherServer);
    testContainer.bind(filesystem_watcher_1.FileSystemWatcher).toSelf().onActivation(function (_, watcher) {
        return watcher;
    });
    testContainer.bind(common_2.FileShouldOverwrite).toFunction(function (originalStat, currentStat) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, true];
    }); }); });
    testContainer.bind(common_2.FileSystem).to(test_2.MockFilesystem);
    /* Logger mock */
    testContainer.bind(core_1.ILogger).to(mock_logger_1.MockLogger);
    /* Message Service mocks */
    testContainer.bind(core_1.MessageService).toSelf().inSingletonScope();
    testContainer.bind(core_1.MessageClient).toSelf().inSingletonScope();
}
describe('Preference Service', function () {
    var prefService;
    var prefSchema;
    var stubs = [];
    before(function () {
        disableJSDOM = jsdom_1.enableJSDOM();
        frontend_application_config_provider_1.FrontendApplicationConfigProvider.set({
            'applicationName': 'test',
        });
        testContainerSetup();
    });
    after(function () {
        disableJSDOM();
    });
    beforeEach(function () {
        prefSchema = testContainer.get(preferences_1.PreferenceSchemaProvider);
        prefService = testContainer.get(preferences_1.PreferenceService);
        var impl = testContainer.get(preferences_1.PreferenceServiceImpl);
        impl.initialize();
    });
    afterEach(function () {
        prefService.dispose();
        stubs.forEach(function (s) { return s.restore(); });
        stubs.length = 0;
    });
    it('should get notified if a provider emits a change', function (done) {
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        stubs.push(sinon.stub(userProvider, 'getPreferences').returns({
            testPref: 'oldVal'
        }));
        prefService.onPreferenceChanged(function (pref) {
            if (pref) {
                expect(pref.preferenceName).eq('testPref');
                expect(pref.newValue).eq('newVal');
                return done();
            }
            return done(new Error('onPreferenceChanged() fails to return any preference change infomation'));
        });
        stubs.push(sinon.stub(prefSchema, 'isValidInScope').returns(true));
        mockUserPreferenceEmitter.fire({
            testPref: {
                preferenceName: 'testPref',
                newValue: 'newVal',
                oldValue: 'oldVal',
                scope: preferences_1.PreferenceScope.User,
                domain: []
            }
        });
    }).timeout(2000);
    it('should return the preference from the more specific scope (user > workspace)', function () {
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        var workspaceProvider = testContainer.get(workspace_preference_provider_1.WorkspacePreferenceProvider);
        stubs.push(sinon.stub(userProvider, 'getPreferences').returns({
            'test.boolean': true,
            'test.number': 1
        }));
        stubs.push(sinon.stub(workspaceProvider, 'getPreferences').returns({
            'test.boolean': false,
            'test.number': 0
        }));
        stubs.push(sinon.stub(prefSchema, 'isValidInScope').returns(true));
        expect(prefService.get('test.boolean')).to.be.false;
        expect(prefService.get('test.number')).equals(0);
    });
    it('should return the preference from the more specific scope (folders > workspace)', function () {
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        var workspaceProvider = testContainer.get(workspace_preference_provider_1.WorkspacePreferenceProvider);
        var foldersProvider = testContainer.get(folders_preferences_provider_1.FoldersPreferencesProvider);
        var oneFolderProvider = testContainer.get(folder_preference_provider_1.FolderPreferenceProvider);
        stubs.push(sinon.stub(userProvider, 'getPreferences').returns({
            'test.string': 'userValue',
            'test.number': 1
        }));
        stubs.push(sinon.stub(workspaceProvider, 'getPreferences').returns({
            'test.string': 'wsValue',
            'test.number': 0
        }));
        stubs.push(sinon.stub(foldersProvider, 'canProvide').returns({ priority: 10, provider: oneFolderProvider }));
        stubs.push(sinon.stub(foldersProvider, 'getPreferences').returns({
            'test.string': 'folderValue',
            'test.number': 20
        }));
        stubs.push(sinon.stub(prefSchema, 'isValidInScope').returns(true));
        expect(prefService.get('test.string')).equals('folderValue');
        expect(prefService.get('test.number')).equals(20);
    });
    it('should return the preference from the less specific scope if the value is removed from the more specific one', function () {
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        var workspaceProvider = testContainer.get(workspace_preference_provider_1.WorkspacePreferenceProvider);
        stubs.push(sinon.stub(userProvider, 'getPreferences').returns({
            'test.boolean': true,
            'test.number': 1
        }));
        var stubWorkspace = sinon.stub(workspaceProvider, 'getPreferences').returns({
            'test.boolean': false,
            'test.number': 0
        });
        stubs.push(sinon.stub(prefSchema, 'isValidInScope').returns(true));
        expect(prefService.get('test.boolean')).to.be.false;
        stubWorkspace.restore();
        stubs.push(sinon.stub(workspaceProvider, 'getPreferences').returns({}));
        expect(prefService.get('test.boolean')).to.be.true;
    });
    it('should throw a TypeError if the preference (reference object) is modified', function () {
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        stubs.push(sinon.stub(userProvider, 'getPreferences').returns({
            'test.immutable': [
                'test', 'test', 'test'
            ]
        }));
        stubs.push(sinon.stub(prefSchema, 'isValidInScope').returns(true));
        var immutablePref = prefService.get('test.immutable');
        expect(immutablePref).to.not.be.undefined;
        if (immutablePref !== undefined) {
            expect(function () { return immutablePref.push('fails'); }).to.throw(TypeError);
        }
    });
    it('should still report the more specific preference even though the less specific one changed', function () {
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        var workspaceProvider = testContainer.get(workspace_preference_provider_1.WorkspacePreferenceProvider);
        var stubUser = sinon.stub(userProvider, 'getPreferences').returns({
            'test.boolean': true,
            'test.number': 1
        });
        stubs.push(sinon.stub(workspaceProvider, 'getPreferences').returns({
            'test.boolean': false,
            'test.number': 0
        }));
        mockUserPreferenceEmitter.fire({
            'test.number': {
                preferenceName: 'test.number',
                newValue: 2,
                scope: preferences_1.PreferenceScope.User,
                domain: []
            }
        });
        stubs.push(sinon.stub(prefSchema, 'isValidInScope').returns(true));
        expect(prefService.get('test.number')).equals(0);
        stubUser.restore();
        stubs.push(sinon.stub(userProvider, 'getPreferences').returns({
            'test.boolean': true,
            'test.number': 4
        }));
        mockUserPreferenceEmitter.fire({
            'test.number': {
                preferenceName: 'test.number',
                newValue: 4,
                scope: preferences_1.PreferenceScope.User,
                domain: []
            }
        });
        expect(prefService.get('test.number')).equals(0);
    });
    it('should store preference when settings file is empty', function () { return __awaiter(_this, void 0, void 0, function () {
        var settings;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    settings = '{\n   "key": "value"\n}';
                    return [4 /*yield*/, prefService.set('key', 'value', preferences_1.PreferenceScope.User)];
                case 1:
                    _a.sent();
                    expect(fs.readFileSync(tempPath).toString()).equals(settings);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should store preference when settings file is not empty', function () { return __awaiter(_this, void 0, void 0, function () {
        var settings;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    settings = '{\n   "key": "value",\n   "newKey": "newValue"\n}';
                    fs.writeFileSync(tempPath, '{\n   "key": "value"\n}');
                    return [4 /*yield*/, prefService.set('newKey', 'newValue', preferences_1.PreferenceScope.User)];
                case 1:
                    _a.sent();
                    expect(fs.readFileSync(tempPath).toString()).equals(settings);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should override existing preference', function () { return __awaiter(_this, void 0, void 0, function () {
        var settings;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    settings = '{\n   "key": "newValue"\n}';
                    fs.writeFileSync(tempPath, '{\n   "key": "oldValue"\n}');
                    return [4 /*yield*/, prefService.set('key', 'newValue', preferences_1.PreferenceScope.User)];
                case 1:
                    _a.sent();
                    expect(fs.readFileSync(tempPath).toString()).equals(settings);
                    return [2 /*return*/];
            }
        });
    }); });
    /**
     * A slow provider that becomes ready after 1 second.
     */
    var SlowProvider = /** @class */ (function (_super) {
        __extends(SlowProvider, _super);
        function SlowProvider() {
            var _this = _super.call(this) || this;
            setTimeout(function () {
                _this.prefs['mypref'] = 2;
                _this._ready.resolve();
            }, 1000);
            return _this;
        }
        return SlowProvider;
    }(test_1.MockPreferenceProvider));
    /**
     * Default provider that becomes ready after constructor gets called
     */
    var MockDefaultProvider = /** @class */ (function (_super) {
        __extends(MockDefaultProvider, _super);
        function MockDefaultProvider() {
            var _this = _super.call(this) || this;
            _this.prefs['mypref'] = 5;
            _this._ready.resolve();
            return _this;
        }
        return MockDefaultProvider;
    }(test_1.MockPreferenceProvider));
    /**
     * Make sure that the preference service is ready only once the providers
     * are ready to provide preferences.
     */
    it('should be ready only when all providers are ready', function () { return __awaiter(_this, void 0, void 0, function () {
        var container, service;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    container = new inversify_1.Container();
                    preferences_1.bindPreferenceSchemaProvider(container.bind.bind(container));
                    container.bind(core_1.ILogger).to(mock_logger_1.MockLogger);
                    container.bind(preferences_1.PreferenceProviderProvider).toFactory(function (ctx) { return function (scope) {
                        if (scope === preferences_1.PreferenceScope.User) {
                            return new MockDefaultProvider();
                        }
                        return new SlowProvider();
                    }; });
                    container.bind(preferences_1.PreferenceServiceImpl).toSelf().inSingletonScope();
                    service = container.get(preferences_1.PreferenceServiceImpl);
                    service.initialize();
                    prefSchema = container.get(preferences_1.PreferenceSchemaProvider);
                    return [4 /*yield*/, service.ready];
                case 1:
                    _a.sent();
                    stubs.push(sinon.stub(preferences_1.PreferenceServiceImpl, 'doSetProvider').callsFake(function () { }));
                    stubs.push(sinon.stub(prefSchema, 'isValidInScope').returns(true));
                    expect(service.get('mypref')).to.equal(2);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should answer queries before all providers are ready', function () { return __awaiter(_this, void 0, void 0, function () {
        var container, service;
        return __generator(this, function (_a) {
            container = new inversify_1.Container();
            preferences_1.bindPreferenceSchemaProvider(container.bind.bind(container));
            container.bind(core_1.ILogger).to(mock_logger_1.MockLogger);
            container.bind(preferences_1.PreferenceProviderProvider).toFactory(function (ctx) { return function (scope) {
                if (scope === preferences_1.PreferenceScope.User) {
                    return new MockDefaultProvider();
                }
                return new SlowProvider();
            }; });
            container.bind(preferences_1.PreferenceServiceImpl).toSelf().inSingletonScope();
            service = container.get(preferences_1.PreferenceServiceImpl);
            service.initialize();
            prefSchema = container.get(preferences_1.PreferenceSchemaProvider);
            stubs.push(sinon.stub(preferences_1.PreferenceServiceImpl, 'doSetProvider').callsFake(function () { }));
            stubs.push(sinon.stub(prefSchema, 'isValidInScope').returns(true));
            expect(service.get('mypref')).to.equal(5);
            return [2 /*return*/];
        });
    }); });
    describe('overridden preferences', function () {
        it('getPreferences', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            preferences.set('[json].editor.tabSize', 2, preferences_1.PreferenceScope.User);
            assert.deepEqual({
                'editor.tabSize': 4
            }, preferences.getPreferences());
            schema.registerOverrideIdentifier('json');
            assert.deepEqual({
                'editor.tabSize': 4,
                '[json].editor.tabSize': 2
            }, preferences.getPreferences());
        });
        it('get #0', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            preferences.set('[json].editor.tabSize', 2, preferences_1.PreferenceScope.User);
            assert.equal(4, preferences.get('editor.tabSize'));
            assert.equal(undefined, preferences.get('[json].editor.tabSize'));
            schema.registerOverrideIdentifier('json');
            assert.equal(4, preferences.get('editor.tabSize'));
            assert.equal(2, preferences.get('[json].editor.tabSize'));
        });
        it('get #1', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            schema.registerOverrideIdentifier('json');
            assert.equal(4, preferences.get('editor.tabSize'));
            assert.equal(4, preferences.get('[json].editor.tabSize'));
            preferences.set('[json].editor.tabSize', 2, preferences_1.PreferenceScope.User);
            assert.equal(4, preferences.get('editor.tabSize'));
            assert.equal(2, preferences.get('[json].editor.tabSize'));
        });
        it('get #2', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            schema.registerOverrideIdentifier('json');
            assert.equal(4, preferences.get('editor.tabSize'));
            assert.equal(4, preferences.get('[json].editor.tabSize'));
            preferences.set('editor.tabSize', 2, preferences_1.PreferenceScope.User);
            assert.equal(2, preferences.get('editor.tabSize'));
            assert.equal(2, preferences.get('[json].editor.tabSize'));
        });
        it('has', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            assert.ok(preferences.has('editor.tabSize'));
            assert.ok(!preferences.has('[json].editor.tabSize'));
            schema.registerOverrideIdentifier('json');
            assert.ok(preferences.has('editor.tabSize'));
            assert.ok(preferences.has('[json].editor.tabSize'));
        });
        it('inspect #0', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            var expected = {
                preferenceName: 'editor.tabSize',
                defaultValue: 4,
                globalValue: undefined,
                workspaceValue: undefined,
                workspaceFolderValue: undefined,
            };
            assert.deepEqual(expected, preferences.inspect('editor.tabSize'));
            assert.ok(!preferences.has('[json].editor.tabSize'));
            schema.registerOverrideIdentifier('json');
            assert.deepEqual(expected, preferences.inspect('editor.tabSize'));
            assert.deepEqual(__assign({}, expected, { preferenceName: '[json].editor.tabSize' }), preferences.inspect('[json].editor.tabSize'));
        });
        it('inspect #1', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            var expected = {
                preferenceName: 'editor.tabSize',
                defaultValue: 4,
                globalValue: 2,
                workspaceValue: undefined,
                workspaceFolderValue: undefined,
            };
            preferences.set('editor.tabSize', 2, preferences_1.PreferenceScope.User);
            assert.deepEqual(expected, preferences.inspect('editor.tabSize'));
            assert.ok(!preferences.has('[json].editor.tabSize'));
            schema.registerOverrideIdentifier('json');
            assert.deepEqual(expected, preferences.inspect('editor.tabSize'));
            assert.deepEqual(__assign({}, expected, { preferenceName: '[json].editor.tabSize' }), preferences.inspect('[json].editor.tabSize'));
        });
        it('inspect #2', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            var expected = {
                preferenceName: 'editor.tabSize',
                defaultValue: 4,
                globalValue: undefined,
                workspaceValue: undefined,
                workspaceFolderValue: undefined,
            };
            assert.deepEqual(expected, preferences.inspect('editor.tabSize'));
            assert.ok(!preferences.has('[json].editor.tabSize'));
            schema.registerOverrideIdentifier('json');
            preferences.set('[json].editor.tabSize', 2, preferences_1.PreferenceScope.User);
            assert.deepEqual(expected, preferences.inspect('editor.tabSize'));
            assert.deepEqual(__assign({}, expected, { preferenceName: '[json].editor.tabSize', globalValue: 2 }), preferences.inspect('[json].editor.tabSize'));
        });
        it('onPreferenceChanged #0', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            var events = [];
            preferences.onPreferenceChanged(function (event) { return events.push(event); });
            schema.registerOverrideIdentifier('json');
            preferences.set('[json].editor.tabSize', 2, preferences_1.PreferenceScope.User);
            preferences.set('editor.tabSize', 3, preferences_1.PreferenceScope.User);
            assert.deepEqual([{
                    preferenceName: '[json].editor.tabSize',
                    newValue: 2
                }, {
                    preferenceName: 'editor.tabSize',
                    newValue: 3
                }], events.map(function (e) { return ({
                preferenceName: e.preferenceName,
                newValue: e.newValue
            }); }));
        });
        it('onPreferenceChanged #1', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            var events = [];
            preferences.onPreferenceChanged(function (event) { return events.push(event); });
            schema.registerOverrideIdentifier('json');
            preferences.set('editor.tabSize', 2, preferences_1.PreferenceScope.User);
            assert.deepEqual([{
                    preferenceName: 'editor.tabSize',
                    newValue: 2
                }, {
                    preferenceName: '[json].editor.tabSize',
                    newValue: 2
                }], events.map(function (e) { return ({
                preferenceName: e.preferenceName,
                newValue: e.newValue
            }); }));
        });
        it('onPreferenceChanged #3', function () {
            var _a = prepareServices(), preferences = _a.preferences, schema = _a.schema;
            schema.registerOverrideIdentifier('json');
            preferences.set('[json].editor.tabSize', 2, preferences_1.PreferenceScope.User);
            preferences.set('editor.tabSize', 3, preferences_1.PreferenceScope.User);
            var events = [];
            preferences.onPreferenceChanged(function (event) { return events.push(event); });
            preferences.set('[json].editor.tabSize', undefined, preferences_1.PreferenceScope.User);
            assert.deepEqual([{
                    preferenceName: '[json].editor.tabSize',
                    newValue: 3
                }], events.map(function (e) { return ({
                preferenceName: e.preferenceName,
                newValue: e.newValue
            }); }));
        });
        it('defaultOverrides [go].editor.formatOnSave', function () {
            var _a = prepareServices({
                schema: {
                    properties: {
                        'editor.insertSpaces': {
                            type: 'boolean',
                            default: true,
                            overridable: true
                        },
                        'editor.formatOnSave': {
                            type: 'boolean',
                            default: false,
                            overridable: true
                        }
                    }
                }
            }), preferences = _a.preferences, schema = _a.schema;
            assert.equal(true, preferences.get('editor.insertSpaces'));
            assert.equal(undefined, preferences.get('[go].editor.insertSpaces'));
            assert.equal(false, preferences.get('editor.formatOnSave'));
            assert.equal(undefined, preferences.get('[go].editor.formatOnSave'));
            schema.registerOverrideIdentifier('go');
            schema.setSchema({
                id: 'defaultOverrides',
                title: 'Default Configuration Overrides',
                properties: {
                    '[go]': {
                        type: 'object',
                        default: {
                            'editor.insertSpaces': false,
                            'editor.formatOnSave': true
                        },
                        description: 'Configure editor settings to be overridden for go language.'
                    }
                }
            });
            assert.equal(true, preferences.get('editor.insertSpaces'));
            assert.equal(false, preferences.get('[go].editor.insertSpaces'));
            assert.equal(false, preferences.get('editor.formatOnSave'));
            assert.equal(true, preferences.get('[go].editor.formatOnSave'));
        });
        function prepareServices(options) {
            var container = new inversify_1.Container();
            preferences_1.bindPreferenceSchemaProvider(container.bind.bind(container));
            container.bind(preferences_1.PreferenceProviderProvider).toFactory(function () { return function () { return new test_1.MockPreferenceProvider(); }; });
            container.bind(preferences_1.PreferenceServiceImpl).toSelf().inSingletonScope();
            var schema = container.get(preferences_1.PreferenceSchemaProvider);
            schema.setSchema(options && options.schema || {
                properties: {
                    'editor.tabSize': {
                        type: 'number',
                        description: '',
                        overridable: true,
                        default: 4
                    }
                }
            });
            var preferences = container.get(preferences_1.PreferenceServiceImpl);
            preferences.initialize();
            return { preferences: preferences, schema: schema };
        }
    });
});
//# sourceMappingURL=preference-service.spec.js.map