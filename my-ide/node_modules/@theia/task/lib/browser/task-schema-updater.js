"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2019 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var inversify_1 = require("inversify");
var json_schema_store_1 = require("@theia/core/lib/browser/json-schema-store");
var common_1 = require("@theia/core/lib/common");
var uri_1 = require("@theia/core/lib/common/uri");
var task_service_1 = require("./task-service");
var TaskSchemaUpdater = /** @class */ (function () {
    function TaskSchemaUpdater() {
    }
    TaskSchemaUpdater.prototype.update = function () {
        return __awaiter(this, void 0, void 0, function () {
            var taskSchema, taskTypes, taskSchemaUrl, contents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        taskSchema = {
                            properties: {
                                tasks: {
                                    type: 'array',
                                    items: __assign({}, common_1.deepClone(taskConfigurationSchema))
                                }
                            }
                        };
                        return [4 /*yield*/, this.taskService.getRegisteredTaskTypes()];
                    case 1:
                        taskTypes = _a.sent();
                        taskSchema.properties.tasks.items.oneOf[0].allOf[0].properties.type.enum = taskTypes;
                        taskSchemaUrl = new uri_1.default('vscode://task/tasks.json');
                        contents = JSON.stringify(taskSchema);
                        try {
                            this.inmemoryResources.update(taskSchemaUrl, contents);
                        }
                        catch (e) {
                            this.inmemoryResources.add(taskSchemaUrl, contents);
                            this.jsonSchemaStore.registerSchema({
                                fileMatch: ['tasks.json'],
                                url: taskSchemaUrl.toString()
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(json_schema_store_1.JsonSchemaStore),
        __metadata("design:type", json_schema_store_1.JsonSchemaStore)
    ], TaskSchemaUpdater.prototype, "jsonSchemaStore", void 0);
    __decorate([
        inversify_1.inject(common_1.InMemoryResources),
        __metadata("design:type", common_1.InMemoryResources)
    ], TaskSchemaUpdater.prototype, "inmemoryResources", void 0);
    __decorate([
        inversify_1.inject(task_service_1.TaskService),
        __metadata("design:type", task_service_1.TaskService)
    ], TaskSchemaUpdater.prototype, "taskService", void 0);
    TaskSchemaUpdater = __decorate([
        inversify_1.injectable()
    ], TaskSchemaUpdater);
    return TaskSchemaUpdater;
}());
exports.TaskSchemaUpdater = TaskSchemaUpdater;
var taskConfigurationSchema = {
    oneOf: [
        {
            'allOf': [
                {
                    type: 'object',
                    required: ['type', 'label'],
                    properties: {
                        label: {
                            type: 'string',
                            description: 'A unique string that identifies the task that is also used as task\'s user interface label'
                        },
                        type: {
                            type: 'string',
                            enum: ['shell', 'process'],
                            default: 'shell',
                            description: 'Determines what type of process will be used to execute the task. Only shell types will have output shown on the user interface'
                        },
                        cwd: {
                            type: 'string',
                            description: 'The directory in which the command will be executed'
                        },
                        command: {
                            type: 'string',
                            description: 'The actual command or script to execute'
                        },
                        args: {
                            type: 'array',
                            description: 'A list of strings, each one being one argument to pass to the command',
                            items: {
                                type: 'string'
                            }
                        },
                        windows: {
                            type: 'object',
                            'description': 'Windows specific command configuration overrides command and args',
                            properties: {
                                command: {
                                    type: 'string',
                                    description: 'The actual command or script to execute'
                                },
                                args: {
                                    type: 'array',
                                    description: 'A list of strings, each one being one argument to pass to the command',
                                    items: {
                                        type: 'string'
                                    }
                                },
                            }
                        }
                    }
                }
            ]
        }
    ]
};
//# sourceMappingURL=task-schema-updater.js.map